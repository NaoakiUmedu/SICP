■1.1 プログラミングの要素
	■基本式 言語に関わる最も単純な実体
	■組み合わせの方法 複合要素をより単純なものから構築する方法
	■抽象化の方法 複合要素に名前をつけ、単体として扱うための方法
	■1.1.1 式
		インタプリタは式を入力するとその式の評価の結果を表示する
			(+ 137 34)...組み合わせ(手続きの適用)
				(<演算子> <被演算子> ...)
					被演算子の値のことを引数という
	■1.1.2 命名と環境
	 	値がそのオブジェクトである変数を名前によって特定する
	 	環境が名前とオブジェクトのペアを記録する
	■1.1.3 組み合わせの評価
		1. 組み合わせの部分式を評価する
		2. 演算子の値となっている手続きを、非演算子、つまり部分式の残り値に適用する
		3. その他の名前の値は現在の環境でその名前に関連付けられたオブジェクトである
			↑評価規則は再帰的となる 木の集積
			当てはまらないものは特殊形式と呼ばれる(defineとか)
	■1.1.4 複合手続き
		(define (<名前> <仮引数>)
			<本体>)
	■1.1.5 手続き適用の置換モデル
		インタプリタは組み合わせの各要素を評価し、手続きを引数に適用する
			置換モデル
				複合手続きを引数に適用するには、手続きの本体に出てくる仮引数を対応する引数で置き換えて、それを評価する
				[適用順序評価]
				引数を評価してから適用する
				(f 5)
				(sum-of-squares (+ 5 1) (* 5 2))
				(+ (square 6) (square 10))
				(+ (* 6 6) (* 10 10))
				(+ 36 100)
				136
				[正規評価順序]
				非演算子の式を基本演算子しか出てこない式になるまで置き換えてから評価する
				(f 5)
				(sum-of-squares (+ 5 1) (* 5 2))
				(+ (square (+ 5 1)) (square (* 5 2)))
				(+ (* (+ 5 1) (+ 5 1)) (* (+ 5 2) (+ 5 2)))
				(+ (* 6 6) (* 10 10))
				(+ 36 100)
				136
	■1.1.6 条件式と述語
		(cond	(<p1> <e1>)
				(<p2> <e2>)
				...
				(<p2> <e2>))
			(<pi> <ei>)...節
			<p> 述語(predicate)
			<e> 結果式(consequent expression)
		if, and, or, not
	■1.1.7 ニュートン法による平方根
		関数と手続きの違いは、物事の属性について説明することと、どうやって物事を行うかについて説明することの
		一般的な違いを反映したもの(宣言的知識と命令的知識)。
	■ブラックボックス抽象化としての手続き
		再帰的とは、手続きがそれ自身を使って定義されているということ。
		手続き定義は詳細を隠せるようになっていなければならない。(手続き抽象)
		仮引数とは、プログラム中で関数やメソッドを呼び出して実行する際、関数側で値を受け取るために宣言された変数のこと。
		仮引数の名前は束縛変数(bound variable)と呼ばれ、手続き定義は仮引数を束縛(bind)するといった言い方をする。
		束縛変数が手続き定義の中で一貫性を持って改名された場合、手続きの意味は変わらない。
		もし変数が束縛されていなければ、それは自由(free)であると言う。
		束縛によって名前が定義される式のセットはその名前のスコープ(scope)と言う。
		手続き定義においては、その手続きの仮引数として宣言された束縛変数は、その手続の本体をスコープとして持っている。
