;; 2.1.1
;; 有理数の演算の定義
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
; a/b == c/d <=> ad == bd
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
;; 有理数の定義
;(define (make-rat n d) (cons n d))
(define (make-rat n d)
  (define (gcd a b)
    (if (< a b)
        (gcd b a)
        (let ((r (remainder a b)))
              (if (= r 0)
              b
              (gcd b r)))))
  (let ((g (gcd n d)))
    (cons (/ n g) (/ d g))))
(define (numer x) (car x))
(define (denom x) (cdr x))
;; ログ
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

;; 動作確認
;;(define one-half (make-rat 1 2))
;; (print-rat one-half)
;;(define one-third (make-rat 1 3))
;; (print-rat (add-rat one-half one-third))
;; (print-rat (sub-rat one-half one-third))
;; (print-rat (mul-rat one-half one-third))
;; (print-rat (div-rat one-half one-third))
;; (display (equal-rat? one-half one-third))
;; (display (equal-rat? one-half one-half))
;(print-rat (add-rat one-third one-third))

;; R 2.1
(define (make-rat n d)
  (define (gcd a b)
    (if (<= (abs a) (abs b))
        (gcd b a)
        (let ((r (remainder a b)))
              (if (= r 0)
              b
              (gcd b r)))))
  ;; 既約分数にする
  (let ((g (gcd n d)))
    (let ((n-g (/ n g))
          (d-g (/ d g)))
          (if (> d-g 0)
              (cons n-g d-g)
              (cons (* -1 n-g) (* -1 d-g))))))

(define (make-rat n d)
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))
  (let ((g (abs (gcd n d))))
    (if (< d 0)
        (cons (/ (- n) g) (/ (- d) g))
        (cons (/ n g) (/ d g)))))

;; 2.1.2
(define (make-rat n d) (cons n d))
(define (numer x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (car x) g)))
(define (denom x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (cdr x) g)))

;;(print-rat (make-rat  1 -2))
;;(print-rat (make-rat -1  2))
;;(print-rat (make-rat  1  2))
;;(print-rat (make-rat -1 -2))

;; R2.2
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define (make-segment start end) (cons start end))
(define (start-segment segment) (car segment))
(define (end-segment segment) (cdr segment))
(define (midpoint-segment s)
  (define (average a b) (/ (+ a b) 2))
  (let ((mid-x (average (x-point (start-segment s)) (x-point (end-segment s))))
        (mid-y (average (y-point (start-segment s)) (y-point (end-segment s)))))
        (make-point mid-x mid-y)))
(define (print-segment s)
  (newline)
  (display "---print-segment start---")
  (display (print-point (start-segment s)))
  (display (print-point (end-segment s)))
  (newline)
  (display "---print-segment end---"))

;;(define a (make-point 12 -3))
;;(define b (make-point -27 6))
;;(define sg (make-segment a b))
;;(print-segment sg)
;;(print-point (midpoint-segment sg))
